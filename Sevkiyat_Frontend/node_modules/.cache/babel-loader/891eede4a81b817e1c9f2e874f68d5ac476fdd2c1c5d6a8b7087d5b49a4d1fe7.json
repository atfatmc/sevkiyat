{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ATIF ATMACA\\\\Desktop\\\\Sevkiyat\\\\Sevkiyat_Frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n      fetchUserData(token);\n    }\n  }, []);\n  const fetchUserData = async token => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/users/me', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUser(response.data);\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      logout();\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      // Create form data\n      const formData = new URLSearchParams();\n      formData.append('username', email); // Spring Security expects 'username' parameter\n      formData.append('password', password);\n      const response = await axios.post('http://localhost:8080/api/auth/login', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const {\n        token\n      } = response.data;\n      if (token) {\n        localStorage.setItem('token', token);\n        setIsAuthenticated(true);\n        await fetchUserData(token);\n      } else {\n        throw new Error('No token received');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const register = async (email, password, name) => {\n    try {\n      const formData = new URLSearchParams();\n      formData.append('email', email);\n      formData.append('password', password);\n      formData.append('name', name);\n      await axios.post('http://localhost:8080/api/auth/register', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user,\n      login,\n      logout,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Cix+uXOU60jwVTrRl9ss+REDA3M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","token","localStorage","getItem","fetchUserData","response","get","headers","Authorization","data","error","console","logout","login","email","password","formData","URLSearchParams","append","post","setItem","Error","removeItem","register","name","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/ATIF ATMACA/Desktop/Sevkiyat/Sevkiyat_Frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  user: any;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  register: (email: string, password: string, name: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n      fetchUserData(token);\r\n    }\r\n  }, []);\r\n\r\n  const fetchUserData = async (token: string) => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8080/api/users/me', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching user data:', error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      // Create form data\r\n      const formData = new URLSearchParams();\r\n      formData.append('username', email); // Spring Security expects 'username' parameter\r\n      formData.append('password', password);\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:8080/api/auth/login',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n        }\r\n      );\r\n      \r\n      const { token } = response.data;\r\n      if (token) {\r\n        localStorage.setItem('token', token);\r\n        setIsAuthenticated(true);\r\n        await fetchUserData(token);\r\n      } else {\r\n        throw new Error('No token received');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const register = async (email: string, password: string, name: string) => {\r\n    try {\r\n      const formData = new URLSearchParams();\r\n      formData.append('email', email);\r\n      formData.append('password', password);\r\n      formData.append('name', name);\r\n\r\n      await axios.post(\r\n        'http://localhost:8080/api/auth/register',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, user, login, logout, register }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}